Kellan Ren
FunComp 
Lab 6 Life
1. From the user's perspective, they are able to execute playlife with a file attached, if they enter in a file, then it runs with that file. If they enter more than one file, then the program doesn't run and they are told to try again. If they don't enter a file, then it allows them to enter a command. If they pick a and enter coordinates, it adds an X at that coordinate if that coordinate is within the space. Then, it prints the new board with the new coordinate and then asks them to enter another command. If they enter r, then it removes the cell at that location if there are any X's there. If there isn't an X there, then it tells them that there isn't. if they enter an 'n', then the code runs through the rules of the game and displays the next iteration of the game. If they enter q, then the game quits and prints a goodbye message. If they enter p, then it plays the game infinitely until they end the program, and if they enter something that isn't those, then it tells them to try again.
2. Internally, at the command line when calling the program, it checks to see how many arguments there are. If there are two arguments, then it reads the file that the user presents. It initializes the board, and opens the file with a file pointer. If the file doesn't exist or can't be accessed, it prints an error message and doesn't run the program. If the file does exist, it iterates throguh all of the commands inside of the file and adds cells if the first letter is a, and runs the autopilot once it reads a p. It does this until the last line of the file is read. If the user enters three arguments, it prints an error message to the user. When the program is in interactive mode where the user is able to input their options, it runs the following until the user enters a q, which quits the program: first, it displays the board. Then, it asks for user input. Then, if the first input is an a or r, then it looks for two numbers. If it was an a, then it runs the "addCell" function. If it is an r, then it runs the removeCell function. Otherwise, if it is not an a or an r, then if it an n, then it iterates through the next progression of the game. If it is a p, then it runs the autopilot, and if it is none of those, then it displays an error message. For the display function, it takes two arguments, the 2D board array and the size. It prints a "-" first for the top border, then goes to the next line. Then, for the rest, it first prints a "|" for the left side of the border, then prints the character at that corresponding value of the board. Most of them at the start are initiated to a space, and then prints the right side of the board in that row. It does this for a while throughout the whole size of the board, and then prints a "-" at the end for the bottom of the board. The addCell function works like this: first, it checks to see if the values that the user entered to add the cells is between 0 and 39 on both the x and y axis, which makes check the domain and range of the board. Then, it checks the value of the board at that spot, and if there is already an X, then it displays a message that tells the user that there is already an X there. Otherwise, it changes the value of the board at that spot to an X. For the removeCell function, it does the same thing except it changes an X to a ' '. The arrCopy function sets the second parameter array as the same as the first, in order to store that initial board somewhere else. The countCells function checks the amount of X in the array by iterating through it very quickly and counting it and returning that integer. The iterate function creates a new 2D array and then enters that as the second parameter into the arrCopy function so that it is made to be the same array. Then, it counts how many cells are next to each other and then does the rules of the game. The autopilot just iterates forever because it uses the iterate function. The initizlize funciton makes every point of the array set to a space. That's pretty much it. 
To test for the outside cases and to make sure that my code works, I put checks for all of the inputs that users do, and checked outside cases like numbers that aren't within the range and also not enough numbers and stuff like that. To check to see if my program actually works, I ran the test executable that we were given and ran them side by side with my code. I think it looked pretty similar. I hope it was the same. Idk. It's late. I'm tired. I want to go to bed. 
