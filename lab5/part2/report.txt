From the user's perspective: They are asked to enter a startup file name. Then, if that file exists, then a menu is displayed for them to pick a choice. Then, they enter a choice. If that choice is available, for 1, it shows the text file, and prompts the menu again. For 2, they are prompted to add a new saying. then, they return to the menu. For 3, they are asked to enter a substring that they can see if it is in the file. Then, it shows whether or not it was. Then they return to the menu. For 4, they are prompted to make a new file name. They can enter a name for the new file, and are prompted back to the menu. For 5, it exits the program. 
Internally: First, it scans for a startup file and sees if it exists. If not, then the program returns 1 which closes the program. If it does exist, it opens the file through a file pointer and then adds the strings in the file into a 2D array and counts how many strings there are. Then, inside of a while loop, it prints the menu through the print_menu function and scans for a choice integer. If the integer is not between 1-5 inclusive, it tells the user that can't choose that number and breaks out of the while loop and stops the program. Otherwise, if the user inputs 5, it also breaks the while loop. Otherwise, there is a switch case for the choice that the user enters from 1-4. For the first one, it runs the function display, which iterates through all of the strings in the array and prints them on seperate lines. For 2, it checks if the number of sayings is less than the max, and if it is, then uses the pointer to scan and add the user's input into the file, taking away white spaces in the beginning and new lines. then, it adds one to the count. for 3, it gets user's input the same way as 2 and then iterates through the strings in the array to see if the input matches any lines in the array, and displays those if it does. if nothing is found, it prints that nothing was found. for 4, it asks the user what they want the array to be saved to (file name) and then makes a new file that saves those strings to that file. gg
To verify that the output is correct, I tested some outside cases, which include entering a startup file that doesn't exist, entering a choice that isn't in the menu, checking to see if there aren't any sayings in a file, seeing if there are more than 49 strings in the file, printing a different text if there aren't any matches for the searchSaying function, and if the file that they want to create isn't able to be opened. 
