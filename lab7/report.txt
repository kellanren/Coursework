1. How the program works from the user's perspective: 
First, they are prompted to enter a file name. If the file is valid, then it prints the menu for them. If not, it exits the program and tells them that the file isn't valid. After the menu is printed, they are prompted to enter a number for the choice that they want to make. If they enter a number that isn't on the board, first of all they are probably a little bit dumb but then tells them that isn't an option and prints the menu again to try again. If they enter 1, they are prompted again to enter a state name. If they enter a valid state name, then the capital of that state is printed. If it isn't valid, then it tells the user that that isn't a state. For 2, they are prompted to enter a state name that they want the abbreviation to. If they enter a valid state name, the abbreviation is printed and they are returned to the menu. If not, they are told that it isn't a state. For 3, they are prompted to enter an abbreviation, and then are told the state with that abbreviation. If the abbreviation is wrong, then they are told so and returned to the menu no matter which one they did. for 4, they are prompted to enter a letter. If they don't enter a letter, then they did it wrong because it clearly says enter a letter. Then, it prints the states that start with the letter they entered. If there aren't any that start with that letter, they are told so, and then returned to the menu. for 5, it just prints the whole file in a nice and orderly manner. 
2. How the program works internally: 
First, the States struct is declared in main as states to the const size of 100. Then, the askFile function asks for a file name, and then opens that file to be read. Then, the function returns the file pointer, which is then declared as fp in main. It checks to see if the file is valid, and if not, prints an error message, and then returns 1, which quits the program. If it was valid, it moves on, where an integer called count is declared by running the read_states function, which takes the file pointer and the struct as its parameters. in here, it runs through a while loop that goes until the end of the file, when it breaks the loop and then returns count. If it isn't the end, it copies each line, using strtok, and sets the strings seperated by commas into its appropriate thingy in struct. For the year, it uses atoi to make sure that it isn't the string that is being copied. After count is defined, in main, it runs through a while loop that only breaks when the user enters 6, which is the option to quit. The user_choice function first prints the menu, which is a bunch of printfs, and then prompts the user for a numbered choice, which is returned into the main and sets the integer choice to the user's entered number. If they entered a number that isn't on the menu, they are told that isn't an option, and then the whole thing loops again. if they enter 1, it runs display_capital, which asks the user to enter a state name, and makes the string all lowercase through the toLowerCase function, which I will explain later. Then, in a for loop that runs until the count that was previously defined, it copies the state name of each struct into a temporary string, which is put into lowercase as well, to make sure that the values of the file isn't being changed. Then, it compares the user's inputted state name to the state name of the struct, and if they match, prints the capital of that state, sets a variable = 1, and breaks the for loop. If it iterates through the entire array of structs without them matching, then the user's input obviously wasn't a state, and then prints that it wasn't and that function is done. If the user enters 2, it pretty much does the exact same thing as the other option, except prints the abbreviation of the state if the user's input was a valid state. If the user enters 3 when prompted, it also does pretty much the same thing except checks for the same abbreviations, and prints the state name with the corresponding abbreviation. If the user enters 4, they are prompted to enter a letter, and then the letter is set to lower case, and is checked with the first character of the name of the structs to see all of the states that start with that letter, and then all of those state names are printed. if the user inputs 5, then it iterates through 0 to count, and displays one state at a time using the display_one function. Finally, the toLowerCase function iterates through the string that is entered as a parameter and goes until a null character, and sets each individual character to lowercase of that character. 
To verify if the output of my program is correct, I entered file names that I didn't have, entered options that weren't there for the menu, and also entered correct and incorrect options for each individual choice, and they all worked the way that I wanted. 
